// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "Roles" ( "Name", "CreatedAt" )
VALUES ( $1, $2 )
    RETURNING "Id", "Name", "CreatedAt"
`

type CreateRoleParams struct {
	Name      string    `json:"Name"`
	CreatedAt time.Time `json:"CreatedAt"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Name, arg.CreatedAt)
	var i Role
	err := row.Scan(&i.Id, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE
FROM "Roles"
WHERE "Id" = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT "Id", "Name", "CreatedAt"
FROM "Roles"
WHERE "Id" = $1
    LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(&i.Id, &i.Name, &i.CreatedAt)
	return i, err
}

const getRoleForUpdate = `-- name: GetRoleForUpdate :one
SELECT "Id", "Name", "CreatedAt"
FROM "Roles"
WHERE "Id" = $1
    LIMIT 1
FOR UPDATE
`

func (q *Queries) GetRoleForUpdate(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleForUpdate, id)
	var i Role
	err := row.Scan(&i.Id, &i.Name, &i.CreatedAt)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT "Id", "Name", "CreatedAt"
FROM "Roles"
ORDER BY "CreatedAt" DESC
    LIMIT $1 OFFSET $2
`

type ListRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.Id, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE "Roles"
SET "Name" = $2, "CreatedAt" = $3
WHERE "Id" = $1
    RETURNING "Id", "Name", "CreatedAt"
`

type UpdateRoleParams struct {
	Id        uuid.UUID `json:"Id"`
	Name      string    `json:"Name"`
	CreatedAt time.Time `json:"CreatedAt"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.Id, arg.Name, arg.CreatedAt)
	var i Role
	err := row.Scan(&i.Id, &i.Name, &i.CreatedAt)
	return i, err
}

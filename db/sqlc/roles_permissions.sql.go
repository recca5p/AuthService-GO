// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles_permissions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRolePermission = `-- name: CreateRolePermission :one
INSERT INTO "RolesPermissions" ("RoleId", "PermissionId", "CreatedAt")
VALUES ($1, $2, $3)
    RETURNING "Id", "RoleId", "PermissionId", "CreatedAt"
`

type CreateRolePermissionParams struct {
	RoleId       uuid.UUID `json:"RoleId"`
	PermissionId uuid.UUID `json:"PermissionId"`
	CreatedAt    time.Time `json:"CreatedAt"`
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (RolesPermission, error) {
	row := q.db.QueryRowContext(ctx, createRolePermission, arg.RoleId, arg.PermissionId, arg.CreatedAt)
	var i RolesPermission
	err := row.Scan(
		&i.Id,
		&i.RoleId,
		&i.PermissionId,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRolePermission = `-- name: DeleteRolePermission :exec
DELETE
FROM "RolesPermissions"
WHERE "Id" = $1
`

func (q *Queries) DeleteRolePermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRolePermission, id)
	return err
}

const getRolePermission = `-- name: GetRolePermission :one
SELECT "Id", "RoleId", "PermissionId", "CreatedAt"
FROM "RolesPermissions"
WHERE "Id" = $1
    LIMIT 1
`

func (q *Queries) GetRolePermission(ctx context.Context, id uuid.UUID) (RolesPermission, error) {
	row := q.db.QueryRowContext(ctx, getRolePermission, id)
	var i RolesPermission
	err := row.Scan(
		&i.Id,
		&i.RoleId,
		&i.PermissionId,
		&i.CreatedAt,
	)
	return i, err
}

const getRolePermissionForUpdate = `-- name: GetRolePermissionForUpdate :one
SELECT "Id", "RoleId", "PermissionId", "CreatedAt"
FROM "RolesPermissions"
WHERE "Id" = $1
    LIMIT 1
FOR UPDATE
`

func (q *Queries) GetRolePermissionForUpdate(ctx context.Context, id uuid.UUID) (RolesPermission, error) {
	row := q.db.QueryRowContext(ctx, getRolePermissionForUpdate, id)
	var i RolesPermission
	err := row.Scan(
		&i.Id,
		&i.RoleId,
		&i.PermissionId,
		&i.CreatedAt,
	)
	return i, err
}

const listRolePermissions = `-- name: ListRolePermissions :many
SELECT "Id", "RoleId", "PermissionId", "CreatedAt"
FROM "RolesPermissions"
WHERE ("RoleId" = $1 OR $1 IS NULL)
ORDER BY "CreatedAt" DESC
    LIMIT $2 OFFSET $3
`

type ListRolePermissionsParams struct {
	RoleId uuid.UUID `json:"RoleId"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListRolePermissions(ctx context.Context, arg ListRolePermissionsParams) ([]RolesPermission, error) {
	rows, err := q.db.QueryContext(ctx, listRolePermissions, arg.RoleId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolesPermission{}
	for rows.Next() {
		var i RolesPermission
		if err := rows.Scan(
			&i.Id,
			&i.RoleId,
			&i.PermissionId,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

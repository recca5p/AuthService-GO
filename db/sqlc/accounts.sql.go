// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "Accounts" ("Username", "PasswordHash", "CreatedAt", "UpdatedAt")
VALUES ($1, $2, $3, $4) RETURNING "Id", "Username", "PasswordHash", "CreatedAt", "UpdatedAt"
`

type CreateAccountParams struct {
	Username     string       `json:"Username"`
	PasswordHash string       `json:"PasswordHash"`
	CreatedAt    time.Time    `json:"CreatedAt"`
	UpdatedAt    sql.NullTime `json:"UpdatedAt"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Username,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE
FROM "Accounts"
WHERE "Id" = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT "Id", "Username", "PasswordHash", "CreatedAt", "UpdatedAt"
FROM "Accounts"
WHERE "Id" = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT "Id", "Username", "PasswordHash", "CreatedAt", "UpdatedAt"
FROM "Accounts"
WHERE ("Username" = $1 OR $1 IS NULL OR $1 = '')
ORDER BY "UpdatedAt" DESC LIMIT $2 OFFSET $3
`

type ListAccountsParams struct {
	Username string `json:"Username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.Id,
			&i.Username,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "Accounts"
SET "PasswordHash" = $2, "UpdatedAt" = $3
WHERE "Id" = $1 RETURNING "Id", "Username", "PasswordHash", "CreatedAt", "UpdatedAt"
`

type UpdateAccountParams struct {
	Id           uuid.UUID    `json:"Id"`
	PasswordHash string       `json:"PasswordHash"`
	UpdatedAt    sql.NullTime `json:"UpdatedAt"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.Id, arg.PasswordHash, arg.UpdatedAt)
	var i Account
	err := row.Scan(
		&i.Id,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

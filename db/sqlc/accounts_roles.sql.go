// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts_roles.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccountRole = `-- name: CreateAccountRole :one
INSERT INTO "AccountsRoles" ("AccountId", "RoleId", "CreatedAt")
VALUES ($1, $2, $3)
    RETURNING "Id", "AccountId", "RoleId", "CreatedAt"
`

type CreateAccountRoleParams struct {
	AccountId uuid.UUID `json:"AccountId"`
	RoleId    uuid.UUID `json:"RoleId"`
	CreatedAt time.Time `json:"CreatedAt"`
}

func (q *Queries) CreateAccountRole(ctx context.Context, arg CreateAccountRoleParams) (AccountsRole, error) {
	row := q.db.QueryRowContext(ctx, createAccountRole, arg.AccountId, arg.RoleId, arg.CreatedAt)
	var i AccountsRole
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.RoleId,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccountRole = `-- name: DeleteAccountRole :exec
DELETE
FROM "AccountsRoles"
WHERE "Id" = $1
`

func (q *Queries) DeleteAccountRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAccountRole, id)
	return err
}

const getAccountRole = `-- name: GetAccountRole :one
SELECT "Id", "AccountId", "RoleId", "CreatedAt"
FROM "AccountsRoles"
WHERE "Id" = $1
    LIMIT 1
`

func (q *Queries) GetAccountRole(ctx context.Context, id uuid.UUID) (AccountsRole, error) {
	row := q.db.QueryRowContext(ctx, getAccountRole, id)
	var i AccountsRole
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.RoleId,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountRoleForUpdate = `-- name: GetAccountRoleForUpdate :one
SELECT "Id", "AccountId", "RoleId", "CreatedAt"
FROM "AccountsRoles"
WHERE "Id" = $1
    LIMIT 1
FOR UPDATE
`

func (q *Queries) GetAccountRoleForUpdate(ctx context.Context, id uuid.UUID) (AccountsRole, error) {
	row := q.db.QueryRowContext(ctx, getAccountRoleForUpdate, id)
	var i AccountsRole
	err := row.Scan(
		&i.Id,
		&i.AccountId,
		&i.RoleId,
		&i.CreatedAt,
	)
	return i, err
}

const listAccountRoles = `-- name: ListAccountRoles :many
SELECT "Id", "AccountId", "RoleId", "CreatedAt"
FROM "AccountsRoles"
WHERE ("AccountId" = $1 OR $1 IS NULL)
ORDER BY "CreatedAt" DESC
    LIMIT $2 OFFSET $3
`

type ListAccountRolesParams struct {
	AccountId uuid.UUID `json:"AccountId"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
}

func (q *Queries) ListAccountRoles(ctx context.Context, arg ListAccountRolesParams) ([]AccountsRole, error) {
	rows, err := q.db.QueryContext(ctx, listAccountRoles, arg.AccountId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountsRole{}
	for rows.Next() {
		var i AccountsRole
		if err := rows.Scan(
			&i.Id,
			&i.AccountId,
			&i.RoleId,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
